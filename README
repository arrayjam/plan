--- 03-08-16 ---

* alias np='vim +"execute \"normal! Go--- $(date '+%d-%m-%y') ---\<cr>\<cr>\"" ~/.plan && pushd $(dirname $(readlink ~/.plan)) >/dev/null && git add . && git commit -m "$(date)" && git push origin 2>&1 > ~/plan-push.log; popd>/dev/null'

* alias p='vim +"execute \"normal! Go\"" ~/.plan && pushd $(dirname $(readlink ~/.plan)) >/dev/null && git add . && git commit -m "$(date)" && git push origin 2>&1 > ~/plan-push.log; popd>/dev/null'

* learned about vim's normal/normal! command and execute "normal! ggDGihaha\<esc>"

* tmutils restore: tmutil restore -v /Volumes/Time\ Machine\ Backups/Backups.backupdb/Monyafeek/2016-08-02-141506/Macintosh\ HD/Users/arrayjam/.vimrc ~/.vimrc

idea: nearby.yuri.io written in scheme? parse json into geojson... figure out nearest object detection, maybe even write webserver?

--- 03-08-16 ---

* Apache ProxyPass and ProxyPassReverse

* Put this on a server with private gpg blocks and a private key, but passphrased

--- 04-08-16 ---

* Tested gpg block decryption system

--- 05-08-16 ---

-----BEGIN PGP MESSAGE-----

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
S9vJR0CnN46RTR400+l5HfXhOw==
=Kzp8
-----END PGP MESSAGE-----

* Learning more about Typescript

* Starting on jsly.

* Can't use mouseover events in blessed over tmux.

* Augmented some types, only use explicit style options in Element.

* Possibly contribute back blessings/index.d.ts if it gets a lot of modifications.

* Try and use default blessing and Typescript for jsly, but think about bringing in react-blessing and hot reloading.

* First sketch out possible user actions and UI, just to get an idea of requirements

* Create simple JSON viewer as proof-of-concept

